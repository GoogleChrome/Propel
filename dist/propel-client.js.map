{"version":3,"sources":["propel-client.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","serverUpdater","url","data","event","type","send","action","isSubscribed","subscription","currentSubscription","message","fetch","method","body","JSON","stringify","headers","Content-Type","_createClass","defineProperties","target","props","descriptor","defineProperty","key","protoProps","staticProps","MESSAGES","not supported","denied","default","endpoint","nogcmid","SubscriptionFailedError","_Error","this","_this","getPrototypeOf","PushClientEvent","_this2","dataKeys","keys","forEach","EventDispatch","_eventTypes","Map","eventType","listener","has","set","Set","get","add","eventListeners","eventListener","SUPPORTED","navigator","window","ServiceWorkerRegistration","ERROR_MESSAGES","bad constructor","redundant worker","registrationReady","registration","active","Promise","resolve","serviceWorker","installing","waiting","reject","state","stateChangeListener","removeEventListener","addEventListener","PushClient","_EventDispatch","workerUrlOrRegistration","scope","_this3","isSupported","_registrationPromise","options","register","_dispatchStatusUpdate","_this4","all","getSubscription","getPermissionState","then","results","permissionState","status","dispatchEvent","err","console","warn","_this5","requestPermission","permissionStatus","pushManager","subscribe","userVisibleOnly","_this6","getRegistration","unsubscribe","_this7","dispatchStatusChange","arguments","undefined","Notification","resolvedState","permission","goog","propel","PropelClient"],"mappings":"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","file":"propel-client.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/*\n  Copyright 2015 Google Inc. All Rights Reserved.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n      http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MESSAGES = {\n  'not supported': 'Your browser doesn\\'t support push messaging.',\n  'denied': 'The user denied permission to show notifications.',\n  'default': 'The user dismissed the notification permission dialog.',\n  'endpoint': 'No endpoint URL specified.',\n  'nogcmid': 'Please ensure you have a Web App Manifest with ' + 'a \"gcm_sender_id\" defined.'\n};\n\nvar SubscriptionFailedError = function (_Error) {\n  _inherits(SubscriptionFailedError, _Error);\n\n  function SubscriptionFailedError(type) {\n    _classCallCheck(this, SubscriptionFailedError);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SubscriptionFailedError).call(this));\n\n    _this.message = 'Subscription failed.';\n    if (MESSAGES[type]) {\n      _this.message += ' ' + MESSAGES[type];\n    }\n\n    _this.type = type;\n    return _this;\n  }\n\n  return SubscriptionFailedError;\n}(Error);\n\nvar PushClientEvent = function PushClientEvent(type, data) {\n  var _this2 = this;\n\n  _classCallCheck(this, PushClientEvent);\n\n  this.type = type;\n\n  if (data) {\n    var dataKeys = Object.keys(data);\n    dataKeys.forEach(function (key) {\n      _this2[key] = data[key];\n    });\n  }\n};\n\nvar EventDispatch = function () {\n  function EventDispatch() {\n    _classCallCheck(this, EventDispatch);\n\n    this._eventTypes = new Map();\n  }\n\n  _createClass(EventDispatch, [{\n    key: 'addEventListener',\n    value: function addEventListener(eventType, listener) {\n      if (!this._eventTypes.has(eventType)) {\n        // Create a new set for this event type\n        this._eventTypes.set(eventType, new Set());\n      }\n\n      this._eventTypes.get(eventType).add(listener);\n    }\n  }, {\n    key: 'removeEventListener',\n    value: function removeEventListener(eventType, listener) {\n      if (!this._eventTypes.has(eventType)) {\n        // No events of this type so nothing to do.\n        return;\n      }\n\n      this._eventTypes.get(eventType).delete(listener);\n    }\n  }, {\n    key: 'dispatchEvent',\n    value: function dispatchEvent(event) {\n      if (!this._eventTypes.has(event.type)) {\n        // No events of this type so nothing to do.\n        return;\n      }\n\n      var eventListeners = this._eventTypes.get(event.type);\n      eventListeners.forEach(function (eventListener) {\n        eventListener(event);\n      });\n    }\n  }]);\n\n  return EventDispatch;\n}();\n\nvar SUPPORTED = 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'showNotification' in ServiceWorkerRegistration.prototype;\n\nvar ERROR_MESSAGES = {\n  'bad constructor': 'The PushClient constructor expects either service ' + 'worker registration or the path to a service worker file and an ' + 'optional scope string.',\n  'redundant worker': 'Worker became redundant'\n};\n\nvar registrationReady = function registrationReady(registration) {\n  if (registration.active) {\n    return Promise.resolve(registration);\n  }\n\n  var serviceWorker = registration.installing || registration.waiting;\n\n  return new Promise(function (resolve, reject) {\n    // Because the Promise function is called on next tick there is a\n    // small chance that the worker became active already.\n    if (serviceWorker.state === 'activated') {\n      resolve(registration);\n      return;\n    }\n\n    var stateChangeListener = function stateChangeListener() {\n      if (serviceWorker.state === 'activated') {\n        resolve(registration);\n      } else if (serviceWorker.state === 'redundant') {\n        reject(new Error(ERROR_MESSAGES['redundant worker']));\n      } else {\n        return;\n      }\n      serviceWorker.removeEventListener('statechange', stateChangeListener);\n    };\n    serviceWorker.addEventListener('statechange', stateChangeListener);\n  });\n};\n\n/**\n * PushClient is a front end library that simplifies adding push to your\n * site.\n */\n\nvar PushClient = function (_EventDispatch) {\n  _inherits(PushClient, _EventDispatch);\n\n  /**\n   * Constructs a new PushClient.\n   *\n   * If the current browser has a push subscription then it will be\n   * obtained in the constructor and a subscriptionChange event will be\n   * dispatched.\n   *\n   * @param {String} workerUrlOrRegistration - Service worker URL to be\n   *  registered that will receive push events.\n   * @param {String} scope - The scope that the Service worker should be\n   *  registered with.\n   */\n\n  function PushClient(workerUrlOrRegistration, scope) {\n    _classCallCheck(this, PushClient);\n\n    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(PushClient).call(this));\n\n    if (!PushClient.isSupported()) {\n      throw new Error('Your browser does not support the web push API');\n    }\n\n    if (workerUrlOrRegistration instanceof ServiceWorkerRegistration) {\n      _this3._registrationPromise = Promise.resolve(workerUrlOrRegistration);\n    } else {\n      var url = workerUrlOrRegistration;\n      if (!url || typeof url !== 'string' || url.length === 0) {\n        throw new Error(ERROR_MESSAGES['bad constructor']);\n      }\n\n      var options = void 0;\n      if (scope) {\n        options = { scope: scope };\n      }\n      _this3._registrationPromise = navigator.serviceWorker.register(workerUrlOrRegistration, options);\n    }\n\n    // It is possible for the subscription to change in between page loads. We\n    // should re-send the existing subscription when we initialise (if there is\n    // one)\n    _this3._dispatchStatusUpdate();\n    return _this3;\n  }\n\n  _createClass(PushClient, [{\n    key: '_dispatchStatusUpdate',\n    value: function _dispatchStatusUpdate() {\n      var _this4 = this;\n\n      return Promise.all([this.getSubscription().catch(function () {\n        return null;\n      }), PushClient.getPermissionState()]).then(function (results) {\n        return {\n          isSubscribed: results[0] !== null,\n          currentSubscription: results[0],\n          permissionState: results[1]\n        };\n      }).then(function (status) {\n        _this4.dispatchEvent(new PushClientEvent('statuschange', status));\n      }).catch(function (err) {\n        console.warn('Unable to dispatch a status event ' + 'getSubscription() failed.', err);\n      });\n    }\n\n    /**\n     * This method will subscribe a use for push messaging.\n     *\n     * If permission isn't granted for push, this method will show the\n     * permissions dialog before attempting to subscribe the user to push.\n     *\n     * @return {Promise<PushSubscription>} A Promise that\n     *  resolves with a PushSubscription if successful.\n     */\n\n  }, {\n    key: 'subscribe',\n    value: function subscribe() {\n      var _this5 = this;\n\n      // Check for permission\n      return this.requestPermission(false).then(function (permissionStatus) {\n        if (permissionStatus !== 'granted') {\n          _this5._dispatchStatusUpdate();\n          throw new SubscriptionFailedError(permissionStatus);\n        }\n\n        _this5.dispatchEvent(new PushClientEvent('requestingsubscription'));\n\n        // Make sure we have a service worker and subscribe for push\n        return _this5._registrationPromise;\n      }).then(registrationReady).then(function (registration) {\n        return registration.pushManager.subscribe({ userVisibleOnly: true }).catch(function (err) {\n          // This is provide a more helpful message when work with Chrome + GCM\n          if (err.message === 'Registration failed - no sender id provided') {\n            throw new SubscriptionFailedError('nogcmid');\n          } else {\n            throw err;\n          }\n        });\n      }).then(function (subscription) {\n        _this5._dispatchStatusUpdate();\n\n        return subscription;\n      });\n    }\n\n    /**\n     * This method will unsubscribe the user from push on the client side.\n     *\n     * @return {Promise} A Promise that\n     *  resolves once the user is unsubscribed.\n     */\n\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      var _this6 = this;\n\n      return this.getRegistration().then(function (registration) {\n        if (registration) {\n          return registration.pushManager.getSubscription();\n        }\n      }).then(function (subscription) {\n        if (subscription) {\n          return subscription.unsubscribe();\n        }\n      }).then(function () {\n        _this6._dispatchStatusUpdate();\n      }).catch(function (err) {\n        return _this6._dispatchStatusUpdate().then(function () {\n          throw err;\n        });\n      });\n    }\n\n    /**\n     * Get the registration of the service worker being used for push.\n     *\n     * @return {Promise<ServiceWorkerRegistration>} A Promise that\n     *  resolves to either a ServiceWorkerRegistration or to null if none.\n     */\n\n  }, {\n    key: 'getRegistration',\n    value: function getRegistration() {\n      return this._registrationPromise;\n    }\n\n    /**\n     * If the user is currently subscribed for push then the returned promise will\n     * resolve with a PushSubscription object, otherwise it will resolve to null.\n     *\n     * This will not display the permission dialog.\n     *\n     * @return {Promise<PushSubscription>} A Promise that resolves with\n     *  a PushSubscription or null.\n     */\n\n  }, {\n    key: 'getSubscription',\n    value: function getSubscription() {\n      return this.getRegistration().then(function (registration) {\n        if (!registration) {\n          return null;\n        }\n\n        return registration.pushManager.getSubscription();\n      });\n    }\n\n    /**\n     * Will manage requesting permission for push messages, resolving\n     * with the final permission status.\n     * @param {Boolean} dispatchStatusChange - Optional parameter with a\n     * default value of true. If true, a `statuschange` event will be\n     * dispatched once the permission state has resolved (i.e. use interacted\n     * with the permission dialog).\n     * @return {Promise<String>} Permission status of granted, default or denied\n     */\n\n  }, {\n    key: 'requestPermission',\n    value: function requestPermission() {\n      var _this7 = this;\n\n      var dispatchStatusChange = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n      return PushClient.getPermissionState().then(function (permissionState) {\n        // Check if requesting permission will show a prompt\n        if (permissionState === 'default') {\n          _this7.dispatchEvent(new PushClientEvent('requestingpermission'));\n        }\n\n        return new Promise(function (resolve) {\n          return Notification.requestPermission(resolve);\n        }).then(function (resolvedState) {\n          if (dispatchStatusChange) {\n            _this7._dispatchStatusUpdate();\n          }\n          return resolvedState;\n        });\n      });\n    }\n\n    /**\n     * You can use this to decide whether to construct a new PushClient or not.\n     * @return {Boolean} Whether the current browser has everything needed\n     *  to use push messaging.\n     */\n\n  }], [{\n    key: 'isSupported',\n    value: function isSupported() {\n      return SUPPORTED;\n    }\n\n    /**\n     * This method can be used to check if subscribing the user will display\n     * the permission dialog or not.\n     * @return {Promise<PermissionStatus>} PermistionStatus will be\n     * 'granted', 'denied' or 'default' to reflect the current permission state\n     */\n\n  }, {\n    key: 'getPermissionState',\n    value: function getPermissionState() {\n      return new Promise(function (resolve) {\n        resolve(Notification.permission);\n      });\n    }\n  }]);\n\n  return PushClient;\n}(EventDispatch);\n\n/*\n  Copyright 2015 Google Inc. All Rights Reserved.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n      http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n/* eslint-env browser */\n\nfunction serverUpdater(url, data) {\n  return function (event) {\n    // We only really care about subscription changes\n    if (event.type !== 'statuschange') {\n      return;\n    }\n\n    send(url, {\n      action: event.isSubscribed ? 'subscribe' : 'unsubscribe',\n      subscription: event.currentSubscription,\n      data: data\n    });\n  };\n}\n\nfunction send(url, message) {\n  return fetch(url, {\n    method: 'post',\n    body: JSON.stringify(message),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\nwindow.goog = window.goog || {};\nwindow.goog.propel = window.goog.propel || {\n  PropelClient: PushClient,\n  serverUpdater: serverUpdater\n};\n\n},{}]},{},[1]);\n"],"sourceRoot":"/source/"}